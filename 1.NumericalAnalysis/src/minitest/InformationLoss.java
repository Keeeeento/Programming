package minitest;

public class InformationLoss {

	/*
	 * N = 4096 から先は S 1 の値が変化しなくなる．これは，絶対値の大きい順に加算を行う ので，十分大きな k(> N) に対して 1/k
	 * 2 の値が結果に反映されない（情報落ちが生じる） ためである．
	 */

	/*
	 * 情報落ちを防ぐために，絶対値の小さい順に加算を行うよう計算式を変形するとよい．具 体的には， S 2 = ∑ 1 k=n 1/k 2
	 * と変形して計算すると，計算結果は n = 500 のとき S 2 = 1.642936, n = 5000 のとき S 2 = 1.644734,
	 * n = 50000 のとき S 2 = 1.6449106 となった． S 1 では，情報落ちにより n = 5000 と n = 50000
	 * に対する計算結果が一致し ているが， S 2 では値が変化している．もし丸め誤差が無ければ， lim n→∞ S 1 = π 2 /6 ≈
	 * 1.6449340668482264 となるから， n = 5000, 50000 における S 1 と S 2 の値を見比べると， S 2
	 * の方が精度よく計算できていることが分かる．
	 */
}
